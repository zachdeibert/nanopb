# Build and run a test that encodes and decodes a message that contains
# all of the Protocol Buffers data types using the C++ bindings.

Import("env")

c = Copy("$TARGET", "$SOURCE")
env.Command("alltypes.proto", "#alltypes/alltypes.proto", c)
env.Command("alltypes.options", "#alltypes/alltypes.options", c)

base_env = env.Clone()
base_env.Replace(NANOPBFLAGS = '--cpp-descriptor')
base_env.NanopbProto(["alltypes", "alltypes.options"])

for std in ["c++03", "c++11", "c++14", "c++17", "c++20"]:
    e = base_env.Clone()
    e.Append(CXXFLAGS = '-std={}'.format(std))

    # Make sure compiler supports this version of C++ before we actually run the
    # test.
    conf = Configure(e)
    compiler_valid = conf.CheckCXX()
    e = conf.Finish()
    if not compiler_valid:
        print("Skipping {} test - compiler doesn't support it".format(std))
        continue

    if std == 'c++03':
        e.Append(CPPDEFINES = {'PB_C99_STATIC_ASSERT': 1})

    o1 = e.Object("encode_alltypes_{}".format(std), "encode_alltypes.cpp")
    o2 = e.Object("decode_alltypes_{}".format(std), "decode_alltypes.cpp")
    o3 = e.Object("alltypes.pb_{}".format(std), "alltypes.pb.c")
    enc = e.Program([o1, o3, "$COMMON/pb_encode.o", "$COMMON/pb_common.o"])
    dec = e.Program([o2, o3, "$COMMON/pb_decode.o", "$COMMON/pb_common.o"])

    # Test the round-trip from nanopb encoder to nanopb decoder
    e.RunTest(enc)
    e.RunTest([dec, "encode_alltypes_{}.output".format(std)])

    # Re-encode the data using protoc, and check that the results from nanopb
    # match byte-per-byte to the protoc output.
    e.Decode("encode_alltypes_{}.output.decoded".format(std),
            ["encode_alltypes_{}.output".format(std), "alltypes.proto"],
            MESSAGE='AllTypes')
    e.Encode("encode_alltypes_{}.output.recoded".format(std),
            ["encode_alltypes_{}.output.decoded".format(std), "alltypes.proto"],
            MESSAGE='AllTypes')
    e.Compare(["encode_alltypes_{}.output".format(std), "encode_alltypes_{}.output.recoded".format(std)])
